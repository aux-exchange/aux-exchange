query Query(
  $owner: Address!
  $btc: String!
  $eth: String!
  $usdc: String!
  $btcUsdcPool: PoolInput!
  $ethUsdcPool: PoolInput!
  $btcUsdcMarket: MarketInput!
  $ethUsdcMarket: MarketInput!
) {
  address
  btcUsdcPool: pool(poolInput: $btcUsdcPool) {
    ...poolFields
    btcPriceIn: priceIn(coinTypeIn: $btc, amount: 1)
    usdcPriceIn: priceIn(coinTypeIn: $usdc, amount: 19000)
    btcPriceOut: priceOut(coinTypeOut: $btc, amount: 1)
    usdcPriceOut: priceOut(coinTypeOut: $usdc, amount: 19000)
  }
  ethUsdcPool: pool(poolInput: $ethUsdcPool) {
    ...poolFields
    ethPriceIn: priceIn(coinTypeIn: $eth, amount: 1)
    usdcPriceIn: priceIn(coinTypeIn: $usdc, amount: 1700)
    ethPriceOut: priceOut(coinTypeOut: $eth, amount: 1)
    usdcPriceOut: priceOut(coinTypeOut: $usdc, amount: 1700)
  }
  allPools: pools {
    ...poolFields
  }
  ethBtcPools: pools(poolInputs: [$btcUsdcPool, $ethUsdcPool]) {
    ...poolFields
  }
  poolCoins {
    coinType
    decimals
    name
    symbol
  }
  btcUsdcMarket: market(marketInput: $btcUsdcMarket) {
    ...marketFields
  }
  ethUsdcMarket: market(marketInput: $ethUsdcMarket) {
    ...marketFields
  }
  allMarkets: markets {
    ...marketFields
  }
  btcEthMarkets: markets(marketInputs: [$btcUsdcMarket, $ethUsdcMarket]) {
    ...marketFields
  }
  marketCoins {
    coinType
    decimals
    name
    symbol
  }
  account(owner: $owner) {
    address
    balances {
      coinInfo {
        coinType
        decimals
        name
        symbol
      }
      balance
      availableBalance
    }
    deposits {
      coinType
      from
      to
      amount
    }
    withdrawals {
      coinType
      from
      amount
    }
    transfers {
      coinType
      from
      to
      amount
    }
    poolPositions {
      amountX
      amountY
      amountLP
      share
    }
  }
}

fragment poolFields on Pool {
  coinInfoX {
    coinType
    decimals
    name
    symbol
  }
  coinInfoY {
    coinType
    decimals
    name
    symbol
  }
  coinInfoLP {
    coinType
    decimals
    name
    symbol
  }
  amountX
  amountY
  amountLP
  feePercent
  swaps {
    coinInfoIn {
      coinType
      decimals
      name
      symbol
    }
    coinInfoOut {
      coinType
      decimals
      name
      symbol
    }
    amountIn
    amountOut
  }
  addLiquiditys {
    amountAddedX
    amountAddedY
    amountMintedLP
  }
  removeLiquiditys {
    amountRemovedX
    amountRemovedY
    amountBurnedLP
  }
  position(owner: $owner) {
    amountX
    amountY
    amountLP
    share
  }
}

fragment marketFields on Market {
  name
  baseCoinInfo {
    coinType
    decimals
    name
    symbol
  }
  quoteCoinInfo {
    coinType
    decimals
    name
    symbol
  }
  lotSize
  tickSize
  orderbook {
    bids {
      price
      quantity
    }
    asks {
      price
      quantity
    }
  }
  allOpenOrders: openOrders {
    baseCoinType
    quoteCoinType
    orderId
    owner
    orderType
    orderStatus
    side
    quantity
    price
    auxBurned
    time
  }
  allOrderHistory: orderHistory {
    baseCoinType
    quoteCoinType
    orderId
    owner
    orderType
    orderStatus
    side
    quantity
    price
    auxBurned
    time
  }
  allTradeHistory: tradeHistory {
    baseCoinType
    quoteCoinType
    orderId
    owner
    side
    quantity
    price
    value
    auxBurned
    time
  }
  openOrders(owner: $owner) {
    baseCoinType
    quoteCoinType
    orderId
    owner
    orderType
    orderStatus
    side
    quantity
    price
    auxBurned
    time
  }
  orderHistory(owner: $owner) {
    baseCoinType
    quoteCoinType
    orderId
    owner
    orderType
    orderStatus
    side
    quantity
    price
    auxBurned
    time
  }
  tradeHistory(owner: $owner) {
    baseCoinType
    quoteCoinType
    orderId
    owner
    side
    quantity
    price
    value
    auxBurned
    time
  }
  high24h
  low24h
  volume24h
  bars15s: bars(resolution: SECONDS_15) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars1m: bars(resolution: MINUTES_1) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars5m: bars(resolution: MINUTES_5) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars15m: bars(resolution: MINUTES_15) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars1h: bars(resolution: HOURS_1) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars4h: bars(resolution: HOURS_4) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars1d: bars(resolution: DAYS_1) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
  bars1w: bars(resolution: WEEKS_1) {
    time
    ohlcv {
      open
      high
      low
      close
      volume
    }
  }
}
