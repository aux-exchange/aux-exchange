input PoolInput {
  coinTypeX: String!
  coinTypeY: String!
}

enum FeaturedStatus {
  NONE,
  HOT,
  PROMOTED,
}

type Pool {
  coinInfoX: CoinInfo!
  coinInfoY: CoinInfo!
  coinInfoLP: CoinInfo!
  amountX: Float!
  amountY: Float!
  amountLP: Float!
  priceX: Float!
  priceY: Float!
  feePercent: Float!
  featuredStatus: FeaturedStatus!
  swaps(owner: Address, first: Int, offset: Int): [Swap!]!
  adds(owner: Address, first: Int, offset: Int): [AddLiquidity!]!
  removes(owner: Address, first: Int, offset: Int): [RemoveLiquidity!]!
  position(owner: Address!): Position
  quoteExactIn(coinTypeIn: String!, amountIn: Float!): Float!
  quoteExactOut(coinTypeOut: String!, amountOut: Float!): Float!
}

type Position {
  coinInfoX: CoinInfo!
  coinInfoY: CoinInfo!
  coinInfoLP: CoinInfo!
  amountX: Float!
  amountY: Float!
  amountLP: Float!
  share: Float!
}

input CreatePoolInput {
  poolInput: PoolInput!
  feeBasisPoints: String!
}

input AddLiquidityInput {
  poolInput: PoolInput!
  amountX: Float!
  amountY: Float!
}

input RemoveLiquidityInput {
  poolInput: PoolInput!
  amountLP: Float!
}

input SwapExactInInput {
  poolInput: PoolInput!
  coinTypeIn: String!
  amountIn: Float!
  quoteAmountOut: Float!
  slippage: Float
}

input SwapExactOutInput {
  poolInput: PoolInput!
  coinTypeOut: String!
  amountOut: Float!
  quoteAmountIn: Float!
  slippage: Float
}

type Swap {
  coinInfoIn: CoinInfo!
  coinInfoOut: CoinInfo!
  amountIn: Float!
  amountOut: Float!
  time: Timestamp!
}

type AddLiquidity {
  amountAddedX: Float!
  amountAddedY: Float!
  amountMintedLP: Float!
  time: Timestamp!
}

type RemoveLiquidity {
  amountRemovedX: Float!
  amountRemovedY: Float!
  amountBurnedLP: Float!
  time: Timestamp!
}
