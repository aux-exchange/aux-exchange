input PoolInput {
  coinTypeX: String!
  coinTypeY: String!
}

type Pool {
  coinInfoX: CoinInfo!
  coinInfoY: CoinInfo!
  coinInfoLP: CoinInfo!
  amountX: Float!
  amountY: Float!
  amountLP: Float!
  feePercent: Float!
  swaps(owner: Address, first: Int, offset: Int): [Swap!]!
  adds(owner: Address, first: Int, offset: Int): [AddLiquidity!]!
  removes(owner: Address, first: Int, offset: Int): [RemoveLiquidity!]!
  position(owner: Address!): Position
  priceIn(coinTypeIn: String!, amount: Float!): Float
  priceOut(coinTypeOut: String!, amount: Float!): Float
  decimalUnitsOut(coinTypeOut: String!, decimalUnitsIn: Float!): Float!
  decimalUnitsIn(coinTypeIn: String!, decimalUnitsOut: Float!): Float!
}

type Position {
  coinInfoX: CoinInfo!
  coinInfoY: CoinInfo!
  coinInfoLP: CoinInfo!
  amountX: Float!
  amountY: Float!
  amountLP: Float!
  share: Float!
}

input CreatePoolInput {
  poolInput: PoolInput!
  feePercent: Float!
}

input AddLiquidityInput {
  poolInput: PoolInput!
  amountX: Float!
  amountY: Float!
}

input RemoveLiquidityInput {
  poolInput: PoolInput!
  amountLP: Float!
}

input SwapInput {
  poolInput: PoolInput!
  coinTypeIn: String!
  coinTypeOut: String!
  amountIn: Float!
  minAmountOut: Float!
}

type Swap {
  coinInfoIn: CoinInfo!
  coinInfoOut: CoinInfo!
  amountIn: Float!
  amountOut: Float!
  time: String!
}

type AddLiquidity {
  amountAddedX: Float!
  amountAddedY: Float!
  amountMintedLP: Float!
  time: String!
}

type RemoveLiquidity {
  amountRemovedX: Float!
  amountRemovedY: Float!
  amountBurnedLP: Float!
  time: String!
}
