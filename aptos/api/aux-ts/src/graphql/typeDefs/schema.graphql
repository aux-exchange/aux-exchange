type Query {
  address: Address!
  coins: [CoinInfo!]!
  summaryMetrics: SummaryMetrics!
  ammSummaryMetrics: AmmSummaryMetrics!
  pool(poolInput: PoolInput!): Pool
  pools(poolInputs: [PoolInput!]): [Pool!]!
  market(marketInput: MarketInput!): Market
  markets(marketInputs: [MarketInput!]): [Market!]!
  account(owner: Address!): Account
}

input RegisterCoinInput {
  coinType: String!
}

type Mutation {
  registerCoin(registerCoinInput: RegisterCoinInput!): EntryFunctionPayload!
  createPool(createPoolInput: CreatePoolInput!): EntryFunctionPayload!
  swapExactIn(swapExactInInput: SwapExactInInput!): EntryFunctionPayload!
  swapExactOut(swapExactOutInput: SwapExactOutInput!): EntryFunctionPayload!
  addLiquidity(addLiquidityInput: AddLiquidityInput!): EntryFunctionPayload!
  removeLiquidity(
    removeLiquidityInput: RemoveLiquidityInput!
  ): EntryFunctionPayload!

  createMarket(createMarketInput: CreateMarketInput!): EntryFunctionPayload!
  placeOrder(placeOrderInput: PlaceOrderInput!): EntryFunctionPayload!
  cancelOrder(cancelOrderInput: CancelOrderInput!): EntryFunctionPayload!

  createAuxAccount: EntryFunctionPayload!
  deposit(depositInput: DepositInput!): EntryFunctionPayload!
  withdraw(withdrawInput: WithdrawInput!): EntryFunctionPayload!
  transfer(transferInput: TransferInput!): EntryFunctionPayload!
}

type Subscription {
  swap(poolInputs: [PoolInput!]): Swap!
  addLiquidity(poolInputs: [PoolInput!]): AddLiquidity!
  removeLiquidity(poolInputs: [PoolInput!]): RemoveLiquidity!
  orderbook(marketInputs: [MarketInput!]): Orderbook!
  trade(marketInputs: [MarketInput!]): Trade!
  lastTradePrice(marketInputs: [MarketInput!]): LastTradePrice!
  bar(marketInputs: [MarketInput!], resolution: Resolution!): Bar!
  high24h(marketInputs: [MarketInput!]): High24h!
  low24h(marketInputs: [MarketInput!]): Low24h!
  volume24h(marketInputs: [MarketInput!]): Volume24h!
}

type CoinInfo {
  coinType: String!
  decimals: Float!
  name: String!
  symbol: String!
}

type SummaryMetrics {
  dollarTVL: Float!
  dollarVolume24H: Float!
  dollarVolume7D: Float!
  transactions24H: Int!
  transactions7D: Int!
  users24H: Int!
  users7D: Int!
}

type AmmSummaryMetrics {
  TVL: Float
  volume24h: Float
  fee24h: Float
  userCount24h: Float
  transactionCount24h: Float
  volume1w: Float
  fee1w: Float
  userCount1w: Float
  transactionCount1w: Float
}

scalar Address
scalar EntryFunctionPayload
scalar Timestamp
